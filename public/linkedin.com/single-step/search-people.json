{
  "id": "linkedin.com/single-step/search-people",
  "params": {
    "keywords": {
      "type": "string",
      "description": "The search keywords for people search.",
      "example": "Software Engineer"
    },
    "locationId": {
      "type": "string",
      "description": "Location ID to filter by.",
      "example": "90000049"
    },
    "currentCompanyId": {
      "type": "string",
      "description": "Company ID to filter by current company.",
      "example": "1441"
    },
    "pastCompanyId": {
      "type": "string",
      "description": "Company ID to filter by past company.",
      "example": "1441"
    },
    "industryId": {
      "type": "string",
      "description": "Industry ID to filter by.",
      "example": "1594"
    },
    "network": {
      "type": "string",
      "description": "Network filter (e.g., F for 1st degree connections).",
      "example": "F"
    },
    "connectionOf": {
      "type": "string",
      "description": "Hash ID to find connections of.",
      "example": "ACoAABti4oUBViIxC7aw5ujPX1ehf9eeIxI59zc"
    },
    "followerOf": {
      "type": "string",
      "description": "Hash ID to find followers of.",
      "example": "ACoAABti4oUBViIxC7aw5ujPX1ehf9eeIxI59zc"
    },
    "openToVolunteer": {
      "type": "boolean",
      "description": "Whether to filter for people open to volunteering.",
      "example": true
    },
    "profileLanguage": {
      "type": "string",
      "description": "Preferred profile language.",
      "example": "en"
    },
    "schoolId": {
      "type": "string",
      "description": "School ID to filter by.",
      "example": "3084"
    },
    "serviceCategoryId": {
      "type": "string",
      "description": "Service category ID to filter by.",
      "example": "602"
    },
    "firstName": {
      "type": "string",
      "description": "Filter by first name.",
      "example": "Shuo"
    },
    "lastName": {
      "type": "string",
      "description": "Filter by last name.",
      "example": "Feng"
    },
    "title": {
      "type": "string",
      "description": "Filter by job title.",
      "example": "Software Engineer"
    },
    "company": {
      "type": "string",
      "description": "Filter by company name.",
      "example": "Rexpand"
    },
    "school": {
      "type": "string",
      "description": "Filter by school name.",
      "example": "University of Southern California"
    },
    "start": {
      "type": "number",
      "description": "The starting index for pagination.",
      "example": 0
    }
  },
  "request": {
    "name": "SearchPeople",
    "description": "Searches for people based on various filters and criteria.",
    "method": "GET",
    "domain": "https://www.linkedin.com",
    "endpoint": "/voyager/api/graphql",
    "queryStringBuilder": "{{linkedin.com/search-people.buildSearchPeopleQueryString()}}",
    "headers": {
      "csrf-token": "{{cs_jsonParse(cookies.JSESSIONID)}}"
    },
    "queryTab": {
      "url": "*://*.linkedin.com/*"
    },
    "requestInitiator": "tab",
    "requestMethodType": "fetch"
  },
  "response": {
    "successfulStatusCodes": [200],
    "parsingJs": {
      "code": "const isValidElement = (elements) => { try { for (const item of elements.items) { if (item.item.entityResult.trackingUrn.includes(\"urn:li:member:\")) { return true; } } return false; } catch { return false; }};const result = [];for (const element of response.body.data.searchDashClustersByAll.elements) { if (isValidElement(element)) { for (const item of element.items) { const entityResult = item.item.entityResult; if (!entityResult) { continue; } const memberId = entityResult.trackingUrn?.replace(\"urn:li:member:\", \"\"); const hashId = entityResult.entityUrn ?.split(\"urn:li:fsd_profile:\")[1] ?.split(\",\")[0]; const memberDistance = entityResult.entityCustomTrackingInfo?.memberDistance; const name = entityResult.title?.text; const headline = entityResult.primarySubtitle?.text; const summary = entityResult.summary?.text; const location = entityResult.secondarySubtitle?.text; const profileUrl = entityResult.navigationUrl.split(\"?\")[0]; const publicId = profileUrl.replace(\"https://www.linkedin.com/in/\", \"\"); const insights = entityResult.insightsResolutionResults?.[0]?.simpleInsight?.title?.text; result.push({ memberId, hashId, publicId, memberDistance, name, headline, summary, location, profileUrl, insights, }); } }}return result;"
    }
  }
}
